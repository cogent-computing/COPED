services:

  ##############################
  ##  DJANGO WEB APPLICATION  ##
  ##############################
  web:
    build: ./services/web
    restart: always
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_web
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:${DJANGO_STATIC_ROOT:?}
      - web_service_log_files:/var/log/coped
    expose:
      - 8000
    environment:
      DEBUG: 0
      TESTING: 0
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      STATIC_ROOT: ${DJANGO_STATIC_ROOT:?}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-"localhost 127.0.0.1 [::1]"}
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: ${POSTGRES_DB:?}
      SQL_USER: ${POSTGRES_USER:?}
      SQL_PASSWORD: ${POSTGRES_PASSWORD:?}
      SQL_HOST: db
      SQL_PORT: ${POSTGRES_PORT:-5432}
      ELASTIC_HOSTNAME: elasticsearch
      ELASTIC_PORT: ${ELASTIC_PORT:-9200}
      ELASTIC_USER: ${ELASTICSEARCH_USER:-"elasticsearch"}
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:?}
      HCAPTCHA_SITEKEY: ${HCAPTCHA_SITEKEY:?}
      HCAPTCHA_SECRET: ${HCAPTCHA_SECRET:?}
      MAILJET_API_KEY: ${MAILJET_API_KEY:-""}
      MAILJET_SECRET_KEY: ${MAILJET_SECRET_KEY:-""}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-"noreply@example.com"}
      SERVER_EMAIL: ${SERVER_EMAIL:-"webmaster@example.com"}
      SUPPORT_EMAIL: ${SUPPORT_EMAIL:-"support@example.com"}
      METABASE_SUPERUSER_EMAIL: ${METABASE_SUPERUSER_EMAIL:?}
      METABASE_SUPERUSER_PASSWORD: ${METABASE_SUPERUSER_PASSWORD:?}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:?}

    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      metabase:
        condition: service_healthy

  ##########################
  ## HTTP(S) PROXY SERVER ##
  ##########################
  nginx:
    image: nginx:1.21-perl
    restart: always
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_nginx
    volumes:
      - static_volume:${NGINX_STATIC_LOCATION:?}
      - ./configs/nginx-default.conf.template:/etc/nginx/templates/default.conf.template
    ports:
      - "${NGINX_HOST_PORT:-80}:80"
    environment:
      STATIC_LOCATION: ${NGINX_STATIC_LOCATION:?}
    depends_on:
      - web

  ###################################
  ## POSTGRESQL BACKEND FOR DJANGO ##
  ###################################
  db:
    build:
      context: ./services/db
      args:
        METABASE_DB_NAME: ${METABASE_DB_NAME:-metabase}
        COPED_DB_NAME: ${POSTGRES_DB:-coped_development}
    restart: always
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_postgres
    expose:
      - ${POSTGRES_PORT:-5432}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgresql_volume:/var/lib/postgresql/data
    user: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      PGPORT: ${POSTGRES_PORT:-5432}

  ########################
  ## METABASE ANALYTICS ##
  ########################
  metabase:
    build: ./services/metabase
    restart: always
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_metabase
    expose:
      - ${METABASE_PORT:-3000}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:${METABASE_PORT:-3000}/api/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${MB_DB_DBNAME:-metabase}
      MB_DB_PORT: ${POSTGRES_PORT:-5432}
      MB_DB_USER: ${POSTGRES_USER:?}
      MB_DB_PASS: ${POSTGRES_PASSWORD:?}
      MB_DB_HOST: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_postgres
      MB_JETTY_PORT: ${METABASE_PORT:-3000}
      MB_JETTY_HOST: ${METABASE_HOST:-0.0.0.0}
    depends_on:
      db:
        condition: service_healthy

  ###############################
  ## SEARCH BACKEND FOR DJANGO ##
  ###############################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    restart: always
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_elastic
    volumes:
      - elasticsearch_volume:/usr/share/elasticsearch/data
      - ./configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:?}
    expose:
      - 9200
      - 9300
    healthcheck:
      test: curl -s localhost:9200 > /dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 10s
      timeout: 5s
      retries: 5

  ##########################
  ## REDIS MESSAGE SERVER ##
  ##########################
  redis:
    image: redis:6.2-bullseye
    restart: always
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX:-coped}_redis
    volumes:
      - redis_volume:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    command: >
      --requirepass ${REDIS_PASSWORD:?}

volumes:
  static_volume: null
  postgresql_volume: null
  elasticsearch_volume: null
  redis_volume: null
  web_service_log_files: null

configs:
  NGINX_CONFIG:
    file: ./configs/nginx-default.conf.template
  ELASTICSEARCH_CONFIG:
    file: ./configs/elasticsearch.yml
