services:

  ##########################
  ##  ALWAYS-ON SERVICES  ##
  ##########################
  web:
    build: ./services/web
    restart: always
    container_name: coped_web
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:${DJANGO_STATIC_ROOT:?}
    expose:
      - 8000
    environment:
      DEBUG: 0
      SECRET_KEY: ${DJANGO_SECRET_KEY:?}
      STATIC_ROOT: ${DJANGO_STATIC_ROOT:?}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-"localhost 127.0.0.1 [::1]"}
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: ${POSTGRES_DB:?}
      SQL_USER: ${POSTGRES_USER:?}
      SQL_PASSWORD: ${POSTGRES_PASSWORD:?}
      SQL_HOST: db
      SQL_PORT: ${POSTGRES_PORT:-5432}
      ELASTIC_HOSTNAME: elasticsearch
      ELASTIC_PORT: ${ELASTIC_PORT:-9200}
      RECAPTCHA_PUBLIC_KEY: ${RECAPTCHA_PUBLIC_KEY:-""}
      RECAPTCHA_PRIVATE_KEY: ${RECAPTCHA_PRIVATE_KEY:-""}
      MAILJET_API_KEY: ${MAILJET_API_KEY:-""}
      MAILJET_SECRET_KEY: ${MAILJET_SECRET_KEY:-""}

    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  nginx:
    image: nginx:1.21-perl
    restart: always
    container_name: coped_nginx
    volumes:
      - static_volume:${NGINX_STATIC_LOCATION:?}
      - ./configs/nginx-default.conf.template:/etc/nginx/templates/default.conf.template
    ports:
      - "1337:80"
    environment:
      STATIC_LOCATION: ${NGINX_STATIC_LOCATION:?}
    depends_on:
      - web

  db:
    # TODO: configure Dockerfile/entrypoint script to install POSTGIS 
    # See: https://computingforgeeks.com/how-to-install-postgis-on-ubuntu-linux/
    # 1. apt-get install postgresql-13-postgis-3
    # 2. CREATE EXTENSION postgis;
    # Ensure also that a Django migration is added to enable the extension.
    # See: https://docs.djangoproject.com/en/3.2/ref/contrib/gis/install/postgis/
    image: postgres:13.4-bullseye
    restart: always
    container_name: coped_postgres
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgresql_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_DB: ${POSTGRES_DB:?}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    restart: always
    container_name: coped_elastic
    volumes:
      - elasticsearch_volume:/usr/share/elasticsearch/data
      - ./configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:?}
    expose:
      - 9200
      - 9300
    healthcheck:
      test: curl -s localhost:9200 > /dev/null; if [[ $$? == 52 ]]; then echo 0; else
        echo 1; fi
      interval: 10s
      timeout: 5s
      retries: 5

  ############################
  ##  TASK RUNNER SERVICES  ##
  ############################

  tasks:
    profiles:
      - task-runner
    build: ./tasks
    container_name: coped_tasks
    environment:
      DEBUG: 0
      PYTHONPATH: /tasks # this is where the build mounts the ./tasks directory
      # defaults
      COUCHDB_HOST: ${COUCHDB_HOST:-couch}
      COUCHDB_PORT: ${COUCHDB_PORT:-5984}
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_RESOURCE_TABLE: ${POSTGRES_RESOURCE_TABLE:-coped_resource}
      POSTGRES_TYPE_TABLE: ${POSTGRES_TYPE_TABLE:-coped_resource_type}
      # mandatory
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
      ELASTICSEARCH_USER: ${ELASTICSEARCH_USER:?}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:?}
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

volumes:
  static_volume: null
  postgresql_volume: null
  elasticsearch_volume: null
configs:
  NGINX_CONFIG:
    file: ./configs/nginx-default.conf.template
  ELASTICSEARCH_CONFIG:
    file: ./configs/elasticsearch.yml
