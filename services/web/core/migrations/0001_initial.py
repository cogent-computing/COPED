# Generated by Django 3.2.7 on 2022-03-22 13:47

import core.models.metabase_session
from django.conf import settings
import django.contrib.auth.models
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('coped_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='CoPED ID')),
                ('username', models.CharField(max_length=256, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=250)),
                ('last_name', models.CharField(max_length=250)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('metabase_id', models.IntegerField(editable=False, null=True, verbose_name='Metabase ID')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coped_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='CoPED ID')),
                ('line1', models.CharField(blank=True, max_length=128)),
                ('line2', models.CharField(blank=True, max_length=128)),
                ('line3', models.CharField(blank=True, max_length=128)),
                ('line4', models.CharField(blank=True, max_length=128)),
                ('line5', models.CharField(blank=True, max_length=128)),
                ('city', models.CharField(blank=True, max_length=128)),
                ('county', models.CharField(blank=True, max_length=128)),
                ('region', models.CharField(blank=True, max_length=128)),
                ('postcode', models.CharField(blank=True, max_length=16)),
                ('country', models.CharField(blank=True, max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Addresses',
                'db_table': 'coped_address',
            },
        ),
        migrations.CreateModel(
            name='AppSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('slug', models.SlugField(max_length=128)),
                ('value', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name_plural': 'Application Settings',
                'db_table': 'coped_app_setting',
            },
        ),
        migrations.CreateModel(
            name='EnergySearchTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(max_length=128)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Energy Search Terms',
                'db_table': 'coped_energy_search_term',
            },
        ),
        migrations.CreateModel(
            name='ExternalLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(help_text="Link URL including 'http://' or 'https://'.")),
                ('description', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name_plural': 'External Links',
                'db_table': 'coped_external_link',
            },
        ),
        migrations.CreateModel(
            name='GeoData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField(verbose_name='latitude')),
                ('lon', models.FloatField(verbose_name='longitude')),
            ],
            options={
                'db_table': 'coped_geo_data',
            },
        ),
        migrations.CreateModel(
            name='GeoTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name_plural': 'Keywords and Phrases',
                'db_table': 'coped_keyword',
            },
        ),
        migrations.CreateModel(
            name='LinkedProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation', models.CharField(default='Linked Project', max_length=64)),
            ],
            options={
                'db_table': 'coped_linked_project',
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coped_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='CoPED ID')),
                ('name', models.CharField(max_length=128)),
                ('about', models.TextField(blank=True, help_text='Organisation overview with its role in the energy projects community.')),
                ('addresses', models.ManyToManyField(to='core.Address')),
                ('external_links', models.ManyToManyField(to='core.ExternalLink')),
            ],
            options={
                'db_table': 'coped_organisation',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coped_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='CoPED ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('first_name', models.CharField(max_length=128)),
                ('other_name', models.CharField(blank=True, max_length=128, null=True)),
                ('last_name', models.CharField(max_length=128)),
                ('orcid_id', models.CharField(blank=True, max_length=20, null=True)),
                ('external_links', models.ManyToManyField(to='core.ExternalLink')),
            ],
            options={
                'db_table': 'coped_person',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coped_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='CoPED ID')),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True)),
                ('extra_text', models.TextField(blank=True)),
                ('status', models.CharField(blank=True, help_text='Is the project active or in some other state?', max_length=128)),
                ('start', models.DateField(blank=True, null=True)),
                ('end', models.DateField(blank=True, null=True)),
                ('external_links', models.ManyToManyField(blank=True, to='core.ExternalLink')),
            ],
            options={
                'db_table': 'coped_project',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot', models.CharField(help_text='Name of the bot or crawler that scraped the data.', max_length=32)),
                ('url', models.URLField(help_text='Source URL of the data.', unique=True, verbose_name='URL')),
                ('json', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Raw JSON from the source', null=True, verbose_name='JSON')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Raw Data',
                'db_table': 'coped_raw_data',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coped_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='CoPED ID')),
                ('label', models.CharField(help_text='Short description of the subject.', max_length=64)),
                ('energy_related', models.BooleanField(default=True, help_text='Is the subject related to energy projects?')),
                ('external_link', models.ForeignKey(help_text='Link to an ontology.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.externallink')),
            ],
            options={
                'db_table': 'coped_subject',
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='ProjectSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'coped_project_subscription',
            },
        ),
        migrations.CreateModel(
            name='ProjectSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(blank=True, decimal_places=12, help_text='Strength of match for the subject with this project.', max_digits=13, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.subject')),
            ],
            options={
                'db_table': 'coped_project_subject',
            },
        ),
        migrations.CreateModel(
            name='ProjectPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(default='Lead Person', max_length=64)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.person')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            options={
                'db_table': 'coped_project_person',
            },
        ),
        migrations.CreateModel(
            name='ProjectOrganisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(default='Lead Organisation', max_length=64)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organisation')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            options={
                'db_table': 'coped_project_organisation',
            },
        ),
        migrations.CreateModel(
            name='ProjectKeyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(blank=True, help_text='Strength of match for the keyword with this project.', null=True)),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.keyword')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            options={
                'db_table': 'coped_project_keyword',
            },
        ),
        migrations.CreateModel(
            name='ProjectFund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Value of the funding award.', max_digits=12, null=True)),
                ('start_date', models.DateField(blank=True, help_text='Scheduled funding start date.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Scheduled funding end date.', null=True)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organisation')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('raw_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.rawdata')),
            ],
            options={
                'db_table': 'coped_project_fund',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='funds',
            field=models.ManyToManyField(related_name='funded', through='core.ProjectFund', to='core.Organisation'),
        ),
        migrations.AddField(
            model_name='project',
            name='keywords',
            field=models.ManyToManyField(blank=True, through='core.ProjectKeyword', to='core.Keyword'),
        ),
        migrations.AddField(
            model_name='project',
            name='organisations',
            field=models.ManyToManyField(through='core.ProjectOrganisation', to='core.Organisation'),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='persons',
            field=models.ManyToManyField(through='core.ProjectPerson', to='core.Person'),
        ),
        migrations.AddField(
            model_name='project',
            name='projects',
            field=models.ManyToManyField(through='core.LinkedProject', to='core.Project'),
        ),
        migrations.AddField(
            model_name='project',
            name='raw_data',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.rawdata'),
        ),
        migrations.AddField(
            model_name='project',
            name='subjects',
            field=models.ManyToManyField(blank=True, through='core.ProjectSubject', to='core.Subject'),
        ),
        migrations.CreateModel(
            name='PersonOrganisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(default='Employee', max_length=16)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organisation')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.person')),
            ],
            options={
                'db_table': 'coped_person_organisation',
            },
        ),
        migrations.AddField(
            model_name='person',
            name='organisations',
            field=models.ManyToManyField(through='core.PersonOrganisation', to='core.Organisation'),
        ),
        migrations.AddField(
            model_name='person',
            name='raw_data',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.rawdata'),
        ),
        migrations.AddField(
            model_name='organisation',
            name='raw_data',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.rawdata'),
        ),
        migrations.CreateModel(
            name='MetabaseSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=40)),
                ('expires', models.DateTimeField(default=core.models.metabase_session.expiry_date_time)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'coped_metabase_session',
            },
        ),
        migrations.AddField(
            model_name='linkedproject',
            name='link',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_project', to='core.project'),
        ),
        migrations.AddField(
            model_name='linkedproject',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['text'], name='coped_keywo_text_06cc18_idx'),
        ),
        migrations.AddConstraint(
            model_name='geodata',
            constraint=models.UniqueConstraint(fields=('lat', 'lon'), name='unique-geo-point'),
        ),
        migrations.AddField(
            model_name='address',
            name='geo',
            field=models.ForeignKey(blank=True, help_text='Geographic data.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.geodata'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='projectsubscription',
            unique_together={('project', 'user')},
        ),
        migrations.AddConstraint(
            model_name='projectsubject',
            constraint=models.UniqueConstraint(fields=('project', 'subject'), name='subject-assigned'),
        ),
        migrations.AddConstraint(
            model_name='projectkeyword',
            constraint=models.UniqueConstraint(fields=('project', 'keyword'), name='keyword-assigned'),
        ),
    ]
